import matplotlib
matplotlib.use('Agg') # This must be done before importing matplotlib.pyplot
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
from matplotlib import rcParams
import networkx as nx
import numpy as np
from scipy.stats import itemfreq
import sys
import random

rcParams['axes.labelsize']  = 6
rcParams['axes.titlesize']  = 10
rcParams['xtick.labelsize'] = 6
rcParams['ytick.labelsize'] = 6

#-------------------------------------------------
def get_colors():
    colors = {
          'black':          ['#a6a6a6', '#808080', '#666666', '#404040', '#1a1a1a', '#000000'],
          'green':          ['#003300', '#006600', '#009900', '#00cc00', '#00ff00', '#99ff99'], 
          'red':            ['#003300', '#006600', '#009900', '#00cc00', '#00ff00', '#99ff99'],
          'red':            ['#330000', '#800000', '#b30000', '#ff0000', '#ff4d4d', '#ff9999'],
          'stack':          ['#ff8000', '#1ad1ff', '#ff00ff', '#1a1aff', '#00cc00', '#7575a3'],
          'stack2':         ['#1a75ff', '#ffcc00', '#d2ff4d', '#ff33cc', '#800000', '#4da6ff'],
          
          'flatui':         ["#9b59b6", "#3498db", "#95a5a6", "#e74c3c", "#34495e", "#2ecc71"],
          'sns_hls_palette':[  x for x in ([ 
                                                   (0.33999999999999997, 0.85999999999999988, 0.86), 
                                                   (0.33999999999999997, 0.54799999999999993, 0.86),
                                                   (0.44399999999999962, 0.33999999999999997, 0.86), 
                                                   (0.75599999999999989, 0.33999999999999997, 0.86),
                                                   (0.86, 0.33999999999999997, 0.65199999999999991), 
                                                   (0.86, 0.33999999999999997, 0.33999999999999997),
                                                   (0.86, 0.65200000000000025, 0.33999999999999997), 
                                                   (0.75599999999999956, 0.86, 0.33999999999999997),
                                                   (0.44399999999999995, 0.86, 0.33999999999999997), 
                                                   (0.33999999999999997, 0.86, 0.54799999999999982)
                             ][2:])],
          'sns_cubehelix':[  x for x in reversed([
                                                   (0.10361479515598847, 0.094974942610061161, 0.20622110711523312),
                                                   (0.082593859561937211, 0.27284810506762325, 0.30772012231798751),
                                                   (0.17004232121057958, 0.43679759647517286, 0.22372555555555551),
                                                   (0.45876197523191747, 0.48057366087571074, 0.19972785287539777),
                                                   (0.75766937518242217, 0.47696440257052414, 0.43775520971413712),
                                                   (0.82995767878942039, 0.56320240352482709, 0.77627444444444438),
                                                   (0.76389785476493899, 0.75726887694191825, 0.94940230233452083),
                                                   (0.81065432716524155, 0.92184470519847239, 0.9373759048616408),  
                          ][2:])],
                          
                          
          'PRGn':[(0.51926183349945965, 0.2777393355089075, 0.57831605742959413), (0.73871589408201332, 0.61853135274905791, 0.79238755562726193), (0.92310650208417111, 0.86905037304934329, 0.92595156150705671), (0.88327567016377173, 0.94871203689014205, 0.8662053136264577), (0.61007306797831662, 0.83460208598305197, 0.59354096592641348), (0.20761246102697709, 0.55778547595528993, 0.28350634785259471)],
          'RdYlGn':[(0.88996540448244876, 0.28673587476505952, 0.19815456516602459), (0.98731257284388818, 0.64736641446749377, 0.36424452942960406), (0.99715494057711429, 0.91180315789054422, 0.60107653281267948), (0.89188774193034459, 0.95447904923382931, 0.60107653281267948), (0.61653212180324624, 0.83590927544762106, 0.41191849813741799), (0.22468281756429109, 0.65582470332874976, 0.34440600696732016)],
          'dark':[(0.0, 0.10980392156862745, 0.4980392156862745), (0.00392156862745098, 0.4588235294117647, 0.09019607843137255), (0.5490196078431373, 0.03529411764705882, 0.0), (0.4627450980392157, 0.0, 0.6313725490196078), (0.7215686274509804, 0.5254901960784314, 0.043137254901960784), (0.0, 0.38823529411764707, 0.4549019607843137)],
          'RdBu':[(0.75617071810890646, 0.21038062695194693, 0.22352941947824814), (0.94071511310689593, 0.60991928098248505, 0.48127645896930321), (0.98569780938765583, 0.88896578900954304, 0.83206460055182963), (0.86051519478068639, 0.91741638323839969, 0.94871203689014205), (0.53002693664793876, 0.74563630889443788, 0.85605537190156822), (0.18431373554117539, 0.47266437376246734, 0.7116493828156415)],
          'BrBG':[(0.63137257099151611, 0.39515572786331177, 0.095732413232326508), (0.85728566786822147, 0.72579778643215409, 0.44713571813761022), (0.96362937548581296, 0.92379854356541358, 0.81853134491864377), (0.82991158261018638, 0.92948866241118488, 0.91526336529675656), (0.46159172145759358, 0.77485583810245284, 0.72995003531960878), (0.087889274527483116, 0.47912342758739696, 0.44775088043773875)],
          'YlOrBr':[(0.99949250291375558, 0.95847751112545243, 0.71543254291310032), (0.99607843160629272, 0.85491734813241393, 0.4935178992795009), (0.99607843160629272, 0.69787006798912499, 0.24727413414740096), (0.95510957591673906, 0.50668205747417372, 0.11298731641442167), (0.83641677253386559, 0.33900808341362898, 0.02832756745537706), (0.62588237524032597, 0.21610150337219236, 0.014671281144461212)],
          'RdYlBu':[(0.8899654020900134, 0.2867358697326951, 0.19815456285608668), (0.9873125690696154, 0.64736638720885364, 0.36424451684869474), (0.99715494040753561, 0.91180315263360245, 0.61530182195690586), (0.91180317891830498, 0.96585929506515034, 0.91118797124327044), (0.6409842354868186, 0.82729718875812119, 0.9008073795488023), (0.34648211460899503, 0.54925027766716339, 0.75271050033547027)],
          'YlOrRd':[(0.99949250291375558, 0.91926182718837968, 0.60613612111876991), (0.99607843160629272, 0.80659747404210713, 0.41494810195530163), (0.99443291075089402, 0.6371549620347865, 0.27171088778505137), (0.98988081567427688, 0.40955019090689865, 0.19432526283404405), (0.91864667920505294, 0.1611380281693795, 0.12573625740467334), (0.76046137529260971, 0.013194925206549024, 0.14394464203540017)],
          'BuGn':[(0.88535179460749902, 0.95621684228672699, 0.96682814499911141), (0.74196079969406126, 0.90272972513647642, 0.86895810085184433), (0.51607844771123401, 0.81085737382664402, 0.72735103509005383), (0.31578624704304864, 0.71526337721768551, 0.53843907211341113), (0.17139562607980241, 0.58492889825035543, 0.32635141365668352), (0.017762399946942051, 0.44267590116052069, 0.18523645330877864)],
          'husl':[(0.9677975592919913, 0.44127456009157356, 0.5358103155058701), (0.7350228985632719, 0.5952719904750953, 0.1944419133847522), (0.3126890019504329, 0.6928754610296064, 0.1923704830330379), (0.21044753832183283, 0.6773105080456748, 0.6433941168468681), (0.23299120924703914, 0.639586552066035, 0.9260706093977744), (0.9082572436765556, 0.40195790729656516, 0.9576909250290225)],
          'pastel':[(0.5725490196078431, 0.7764705882352941, 1.0), (0.592156862745098, 0.9411764705882353, 0.6666666666666666), (1.0, 0.6235294117647059, 0.6039215686274509), (0.8156862745098039, 0.7333333333333333, 1.0), (1.0, 0.996078431372549, 0.6392156862745098), (0.6901960784313725, 0.8784313725490196, 0.9019607843137255)],
          'cubehelix':[(0.10231025194333628, 0.13952898866828906, 0.25601203194091809), (0.10594361078604106, 0.38097390115953311, 0.27015111282899046), (0.41061302726727622, 0.48044780541672255, 0.1891154277778484), (0.78291833825305668, 0.48158303462490826, 0.48672451968362596), (0.80461683292764064, 0.63657335693018458, 0.87965784029261251), (0.77756083743784588, 0.88403925212124479, 0.94520079923450517)],
          'PuBu':[(0.91128028210471657, 0.89471742265364707, 0.94292964584687178), (0.7678892871912788, 0.79684737850637999, 0.88944252869662122), (0.5687043576848273, 0.708266068907345, 0.83907728756175326), (0.31378700744872001, 0.6058439296834609, 0.77762400402742271), (0.075371012303466878, 0.47563245915899088, 0.70840447720359356), (0.016193772523718723, 0.3641061211333555, 0.57070360113592711)],
          'YlGn':[(0.95340254026300764, 0.98214532978394453, 0.7143252765431124), (0.80090735519633571, 0.91955402248045981, 0.61531720862669104), (0.59121877387458199, 0.82881969493978169, 0.5223068210424161), (0.34540562244022593, 0.71501731802435486, 0.4107804743682637), (0.17139562607980241, 0.56203001457102153, 0.29233373017872077), (0.017762399946942051, 0.42205306501949535, 0.22177624351838054)],
          'PiYG':[(0.81291811957078819, 0.25444060125771689, 0.56931950064266434), (0.93487120726529294, 0.67981547058797354, 0.83121877207475547), (0.98569780938765583, 0.90319108612397137, 0.94586697746725645), (0.9202614426612854, 0.96293733400457049, 0.85767013535780068), (0.6908881342878529, 0.86243753222858199, 0.48835066077755945), (0.38269896892940297, 0.64036911024766807, 0.18108420862871058)],
          'Set2':[(0.40000000596046448, 0.7607843279838562, 0.64705884456634521), (0.98131487965583808, 0.55538641635109398, 0.38740485135246722), (0.55432528607985565, 0.62711267120697922, 0.79595541393055635), (0.90311419262605563, 0.54185316071790801, 0.76495195557089413), (0.65371782148585622, 0.84708959004458262, 0.32827375098770734), (0.9986312957370983, 0.85096502233954041, 0.18488274134841617)],
          'RdGy':[(0.75617071810890646, 0.21038062695194693, 0.22352941947824814), (0.94071511310689593, 0.60991928098248505, 0.48127645896930321), (0.99430988115422869, 0.8975778607761159, 0.84067667231840248), (0.91180315789054422, 0.91180315789054422, 0.91180315789054422), (0.70196080207824707, 0.70196080207824707, 0.70196080207824707), (0.39561708885080671, 0.39561708885080671, 0.39561708885080671)],
          'OrRd':[(0.9955709345200483, 0.8996539852198433, 0.76299886072383205), (0.99215686321258545, 0.80292196484173051, 0.59001924781238335), (0.99051134235718674, 0.65763938987956327, 0.44688967828657111), (0.95864667682086724, 0.46189928428799498, 0.3103268086910248), (0.87044983471141146, 0.24855056188854516, 0.16822760867721892), (0.720230697183048, 0.024359862068120158, 0.01573241063777138)],
          'Paired':[(0.65098041296005249, 0.80784314870834351, 0.89019608497619629), (0.12572087695201239, 0.47323337360924367, 0.707327968232772), (0.68899655751153521, 0.8681737867056154, 0.54376011946622071), (0.21171857311445125, 0.63326415104024547, 0.1812226118410335), (0.98320646005518297, 0.5980161709820524, 0.59423301088459368), (0.89059593116535862, 0.10449827132271793, 0.11108035462744099)],
          'GnBu':[(0.8682814380701851, 0.94888120258555697, 0.84765860192915976), (0.75903115623137529, 0.90563629935769474, 0.75434065285850971), (0.58477509874923561, 0.83869282007217405, 0.73448675169664268), (0.3799308030044331, 0.74309882346321554, 0.80276817784589882), (0.20845829207523198, 0.59340256172067973, 0.76899655356126673), (0.049134950339794162, 0.42611304170945108, 0.68364477087469666)],
          'YlGnBu':[(0.91012687963597916, 0.96493656495038205, 0.6956401565495659), (0.69845444992476824, 0.88186082980212044, 0.71384853685603422), (0.39601692276842454, 0.76607460064046529, 0.74814303692649398), (0.17296425104141233, 0.629511748341953, 0.75952327461803659), (0.12764321927930794, 0.42666667968619104, 0.68613612020716952), (0.14357555420959697, 0.22523645092459285, 0.5905421235982109)],
          'PuOr':[(0.77462515760870543, 0.41291812588186827, 0.0461361029130571), (0.97654748313567219, 0.69250290183460006, 0.34571319336400314), (0.98854286881054154, 0.90319108612397137, 0.78369859036277323), (0.88043061074088602, 0.88612072958665733, 0.93448673977571373), (0.67112650941399965, 0.6404459996550691, 0.80307575183756208), (0.40046137921950398, 0.27566321106518016, 0.59146484557320089)],
          'colorblind':[(0.0, 0.4470588235294118, 0.6980392156862745), (0.0, 0.6196078431372549, 0.45098039215686275), (0.8352941176470589, 0.3686274509803922, 0.0), (0.8, 0.4745098039215686, 0.6549019607843137), (0.9411764705882353, 0.8941176470588236, 0.25882352941176473), (0.33725490196078434, 0.7058823529411765, 0.9137254901960784)],
          'deep':[(0.2980392156862745, 0.4470588235294118, 0.6901960784313725), (0.3333333333333333, 0.6588235294117647, 0.40784313725490196), (0.7686274509803922, 0.3058823529411765, 0.3215686274509804), (0.5058823529411764, 0.4470588235294118, 0.6980392156862745), (0.8, 0.7254901960784313, 0.4549019607843137), (0.39215686274509803, 0.7098039215686275, 0.803921568627451)],
          'RdPu_r':[(0.5048212261760936, 0.0039215688593685627, 0.47021914825719946), (0.73584007725996126, 0.061960785275361703, 0.52256825028681286), (0.90945021685431982, 0.28948866210731805, 0.60861209560843077), (0.97545559546526739, 0.53302577465188272, 0.6768935217576868), (0.98595924728056961, 0.7293041299371158, 0.74042292973574475), (0.99164936612634103, 0.8647289584664738, 0.85194925911286301)],
          'muted':[(0.2823529411764706, 0.47058823529411764, 0.8117647058823529), (0.41568627450980394, 0.8, 0.396078431372549), (0.8392156862745098, 0.37254901960784315, 0.37254901960784315), (0.7058823529411765, 0.48627450980392156, 0.7803921568627451), (0.7686274509803922, 0.6784313725490196, 0.4), (0.4666666666666667, 0.7450980392156863, 0.8588235294117647)],
          'bright':[(0.0, 0.24705882352941178, 1.0), (0.011764705882352941, 0.9294117647058824, 0.22745098039215686), (0.9098039215686274, 0.0, 0.043137254901960784), (0.5411764705882353, 0.16862745098039217, 0.8862745098039215), (1.0, 0.7686274509803922, 0.0), (0.0, 0.8431372549019608, 1.0)],
          'coolwarm':[(0.40442129049411762, 0.53464349044705883, 0.93200191263529408), (0.60316206791764704, 0.73152747735294121, 0.99956527853725485), (0.78672070135686278, 0.84480721036862749, 0.93981038494901958), (0.93066859633333332, 0.81887699965490202, 0.75914639069803924), (0.96731651566666665, 0.65747082880784313, 0.53816015072941181), (0.88464343869411766, 0.41001709788235297, 0.32250654924705885)],
          'hls':[(0.86, 0.37119999999999997, 0.33999999999999997), (0.82879999999999987, 0.86, 0.33999999999999997), (0.33999999999999997, 0.86, 0.37119999999999997), (0.33999999999999997, 0.82879999999999987, 0.86), (0.37119999999999997, 0.33999999999999997, 0.86), (0.86, 0.33999999999999997, 0.82879999999999987)],
          'Spectral':[(0.88535179460749902, 0.31903114388970766, 0.29042677143040824), (0.98731257284388818, 0.64736641446749377, 0.36424452942960406), (0.99715494057711429, 0.91180315789054422, 0.60107653281267948), (0.92887351442785826, 0.97154940577114335, 0.63806230531019326), (0.6334486913447287, 0.85213380350786094, 0.64367553065804872), (0.28004614044638243, 0.6269896416103139, 0.70242216306574201)]         
          }
    return colors
#-------------------------------------------------
def flip():
    return random.SystemRandom().choice([1,-1])
#-------------------------------------------------
def getCommandLineArgs():
    if len(sys.argv) < 2:
        print ("Usage: python3 degree_dist.py [/absolute/path/to/input_file.txt]\nExiting..\n")
        sys.exit()
    return str(sys.argv[1])
#-------------------------------------------------
def load_network (network_file):
    edges_file = open (network_file,'r') #note: with nx.Graph (undirected), there are 2951  edges, with nx.DiGraph (directed), there are 3272 edges
    M=nx.DiGraph()     
    next(edges_file) #ignore the first line
    counter = 0
    for e in edges_file:
        counter +=1
        e = e.strip()
        interaction = e.split()
        assert len(interaction)>=2
        source, target = str(interaction[0]), str(interaction[1])
        if (len(interaction) >2):
            if (str(interaction[2]) == '+'):
                Ijk=1
            elif  (str(interaction[2]) == '-'):
                Ijk=-1
            else:
                print ("Error: bad interaction sign in file "+network_file+"\nExiting...")
                sys.exit()
        else:
            Ijk=flip()     
        M.add_edge(source, target, sign=Ijk)    
    
    return M
#-------------------------------------------------
def slash(path):
    return path+(path[-1] != '/')*'/'
#-------------------------------------------------
#-------------------------------------------------
if __name__ == "__main__":
    colors = get_colors()
    palette  = ['BuGn','Set2','OrRd','green','RdBu', 'coolwarm','bright','black']
    H_in = []
    H_ou = []
    i=0
    input_file = getCommandLineArgs()
            
    
    fig = plt.figure()
    fig.subplots_adjust(hspace = 0.2, wspace=.1)

    
    indeg_fig = fig.add_subplot (211)
    oudeg_fig = fig.add_subplot (212)
    
    for network_file in open(input_file,'r').readlines():
        
        M = load_network (network_file.strip())
        print ((network_file.split('/')[-1].strip()).ljust(23,' ')+"nodes "+str(len(M.nodes())).ljust(7,' ')+"edges "+str(len(M.edges())).ljust(10,' '))
        in_degrees, ou_degrees = list(M.in_degree().values()), list(M.out_degree().values())
        
        tmp = itemfreq(in_degrees) # Get the item frequencies
        indegs, indegs_frequencies =  tmp[:, 0], tmp[:, 1] # 0 = unique values in data, 1 = frequencies
        indeg_fig.plot(indegs, indegs_frequencies, linestyle='-',  color = colors[palette[i]][5], alpha=0.7,
                                markersize=2, marker='o', markeredgecolor=colors[palette[i]][5])
                                    
        tmp = itemfreq(ou_degrees)
        outdegs, outdegs_frequencies = tmp[:, 0], tmp[:, 1] 
        oudeg_fig.plot(outdegs, outdegs_frequencies, linestyle='-', color = colors[palette[i]][5], alpha=0.7,
                               markersize=2, marker='o', markeredgecolor=colors[palette[i]][5])
        
        in_patch =  mpatches.Patch(color=colors[palette[i]][5], label=(network_file.split('/')[-1]).split('.')[0])
        out_patch = mpatches.Patch(color=colors[palette[i]][5], label=(network_file.split('/')[-1]).split('.')[0])

        H_in, H_ou   =   H_in + [in_patch],   H_ou + [out_patch]
        i+=1
    
    
    indeg_fig.spines["top"].set_visible(False)
    indeg_fig.spines["right"].set_visible(False)

    
    oudeg_fig.spines["top"].set_visible(False)
    oudeg_fig.spines["right"].set_visible(False)

    lowx, highx = indeg_fig.get_xlim()
    indeg_fig.set_xlim(min(5,lowx), highx)
    lowx, highx = oudeg_fig.get_xlim()
    oudeg_fig.set_xlim(min(5,lowx), highx)
    
    lowy, highy = indeg_fig.get_ylim()
    indeg_fig.set_ylim(min(5,lowy), highy)
    lowy, highy = oudeg_fig.get_ylim()
    oudeg_fig.set_ylim(min(5,lowy), highy)

    
    indeg_fig.tick_params( #http://matplotlib.org/api/axes_api.html#matplotlib.axes.Axes.tick_params
        axis='both',          # changes apply to the x-axis
        which='both',      # both major and minor ticks are affected
        right='off',      # ticks along the right edge are off
        top='off',         # ticks along the top edge are off
        pad=3, 
        width=.5,
        length=2
       
    )

    oudeg_fig.tick_params( #http://matplotlib.org/api/axes_api.html#matplotlib.axes.Axes.tick_params
        axis='both',          # changes apply to the x-axis
        which='both',      # both major and minor ticks are affected
        right='off',      # ticks along the right edge are off
        top='off',         # ticks along the top edge are off
        pad=3, 
        width=.5,
        length=2
        
    )
    
    
 
    
    #legend = ax.legend (handles=patches, frameon=False, borderaxespad=1.0, borderpad=1.0, fontsize= 8, markerscale=0.0, loc='upper left',
    #                                bbox_to_anchor = (0.2, 0.825), title='degree range      no. contributing nodes',shadow=False)                  
    #            legend.get_title().set_fontsize('9') #frame = legend.get_frame() #frame.set_facecolor('white') #frame.set_edgecolor('white')
    
    indeg_fig.legend(handles=H_in, frameon=False,fontsize= 6, shadow=False, loc='upper right',  bbox_to_anchor = (0.9, 0.7))
    indeg_fig.set_xlabel('Degree')
    indeg_fig.set_ylabel('Number of nodes')
    #indeg_fig.set_title('In-degree Distribution')
    indeg_fig.text(.4,.8,'In-degree Distribution', transform=indeg_fig.transAxes) #horizontalalignment='center',
    
    oudeg_fig.legend(handles=H_ou, frameon=False,fontsize= 6, shadow=False, loc='upper right', bbox_to_anchor = (0.9, 0.7))
    oudeg_fig.set_xlabel('Degree')
    oudeg_fig.set_ylabel('Number of nodes')
    #oudeg_fig.set_title('Out-degree Distribution')
    oudeg_fig.text(.4,.8,'Out-degree Distribution', transform=oudeg_fig.transAxes) #horizontalalignment='center',

    indeg_fig.autoscale(enable=True, axis='both', tight=True)
    oudeg_fig.autoscale(enable=True, axis='both', tight=True)
 
    
    plt.savefig("ER_networks_in-out-deg-dist.png", dpi=300) # http://matplotlib.org/api/figure_api.html#matplotlib.figure.Figure.savefig
   
    
    print ("\nplotted: ER_networks_in-out-deg-dist.png\n")